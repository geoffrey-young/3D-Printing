[gcode_macro PREHEAT_ABS]
gcode:
  STATUS_PREHEAT
  M140 S110
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=245


[gcode_macro PREHEAT_PCCF]
gcode:
  STATUS_PREHEAT
  M140 S110
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=290


[gcode_macro PREHEAT_PETG]
gcode:
  STATUS_PREHEAT
  M140 S80
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=245


[gcode_macro PREHEAT_PLA]
gcode:
  STATUS_PREHEAT
  M140 S60
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=210


[gcode_macro PREHEAT_TPU]
gcode:
  STATUS_PREHEAT
  M140 S40
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=245


[gcode_macro CONVECTION_START]
gcode:
  CHECK_HOMED
  DOCK_PROBE
  CENTER
  G1 Z10
  M106 S255


[gcode_macro COOLDOWN]
description: turn off all fans and heaters
variable_skip: False
gcode:
  {% if skip %}
    M118 skipping COOLDOWN
    SET_IDLE_TIMEOUT TIMEOUT={ 60 * 60 }
    SKIP_COOLDOWN SKIP=False
  {% else %}
    TURN_OFF_HEATERS
    M107
    STATUS_COOLDOWN
  {% endif %}

  SET_EXHAUST_FAN_TIMER


[gcode_macro SOAK]
description: PREHEAT_ABS, set timeouts to 1 hour
gcode:
  STATUS_PREHEAT
  PREHEAT_ABS
  QUICK_QGL
  CONVECTION_START
  M109 S245
  BRUSH
  SET_IDLE_TIMEOUT TIMEOUT={ 60 * 60 }


[gcode_macro SOAK_BED]
description: SOAK bed only
gcode:
  STATUS_PREHEAT
  M140 S110
  CHECK_HOMED
  DOCK_PROBE
  SET_IDLE_TIMEOUT TIMEOUT={ 60 * 60 }


[gcode_macro CHAMBER_TEMPERATURE]
description: report chamber temperature
gcode:
  {% set temp = printer["temperature_sensor chamber"].temperature %}
  LOG_SUCCESS MSG="{ 'chamber currently %.1f' % (temp) }"


[gcode_macro NOTIFY_AFTER_CHAMBER_AT_TEMP]
description: notify when chamber wait is complete
gcode:
  LOG_DEBUG MSG="will notify when chamber wait is complete..."
  SET_GCODE_VARIABLE MACRO=CHAMBER_WAIT VARIABLE=notify VALUE=1

[gcode_macro CLEAR_NOTIFY_AFTER_CHAMBER_AT_TEMP]
description: clear chamber wait notify
gcode:
  SET_GCODE_VARIABLE MACRO=CHAMBER_WAIT VARIABLE=notify VALUE=0


[gcode_macro CHAMBER_WAIT]
description: wait for chamber to reach temp
variable_skip: False
gcode:

  {% set start_temp = params.START_TEMP | default(99) | float %}
  {% set notify = params.NOTIFY | default(False, True) %}

  {% if skip %}
    M118 skipping CHAMBER_WAIT
    SKIP_CHAMBER_WAIT SKIP=False
  {% else %}
    M118 waiting for chamber to warm up...

    STATUS_PREHEAT

    EXHAUST_FAN_OFF

    TEMPERATURE_TIMER

    {% if start_temp < 30 %}
      LOG_DEBUG MSG="{ 'initial temp %.1f below 30 - adding mandatory soak...' % (start_temp) }"
      TEMPERATURE_TIMER MIN_TEMP=50 MINUTES=5
      LOG_SUCCESS MSG="mandatory soak complete"
    {% endif %}
   
  {% endif %}

  {% set msg = "chamber wait complete" %}

  LOG_SUCCESS MSG="{msg}"
  CHAMBER_TEMPERATURE

  {% if notify %}
    NOTIFY MSG="{msg}"
    CLEAR_NOTIFY_AFTER_CHAMBER_AT_TEMP
  {% endif %}



[gcode_macro TEMPERATURE_TIMER]
description: wait max 20 minutes for chamber to come to temp
variable_minutes: 20
gcode:
  {% set temp = params.MIN_TEMP | default(40) | int %}
  {% set minutes = params.MINUTES | default(printer['gcode_macro TEMPERATURE_TIMER']['minutes']) | int %}

  {% set poll = 30  %} # poll every 30 seconds

  {% set intervals = ((minutes * 60)/poll) | int %}

  # note that this is still blocking, but unlike TEMPERATURE_WAIT it will
  # eventually timeout and let the print continue
  {% for i in range(1,intervals+1) %}
    _CHAMBER_CHECK TEMP={temp} R={intervals} I={i} P={poll}
  {% endfor %}

[gcode_macro _CHAMBER_CHECK]
gcode:
  {% set temp = params.TEMP | int %}
  {% set r = params.R | int %}
  {% set i = params.I | int %}
  {% set p = params.P | int %}
  {% set t = printer["temperature_sensor chamber"].temperature %}

  {% if t < temp %}
    M118 { "chamber at %.1f, waiting... (%i of %i)" % (t, i, r) }
    G4 P{1000 * p}
  {% endif %}


[gcode_macro SKIP_CHAMBER_WAIT]
description: skip waiting on chamber temperature next run
gcode:
  {% set skip = params.SKIP|default(True, True)|int %}

  SET_GCODE_VARIABLE MACRO=CHAMBER_WAIT VARIABLE=skip VALUE={skip}

  M118 { 'SKIP_CHAMBER_WAIT = %d' % (skip) }


[gcode_macro SKIP_COOLDOWN]
description: skip cooldown
gcode:
  {% set skip = params.SKIP|default(True, True)|int %}

  SET_GCODE_VARIABLE MACRO=COOLDOWN VARIABLE=skip VALUE={skip}

  M118 { 'SKIP_COOLDOWN = %d' % (skip) }
