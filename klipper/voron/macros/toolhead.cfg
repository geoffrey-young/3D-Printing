[gcode_macro HOME]
gcode:
  STATUS_HOME_START
  G28
  G90
  STATUS_HOME_END


[gcode_macro CHECK_HOMED]
description: home only if not already homed (or home is forced)
variable_force: 0
gcode:
  {% set force = params.FORCE|default(printer['gcode_macro CHECK_HOMED']['force'],True) | int %}

  {% if "xyz" not in printer.toolhead.homed_axes or force %}
    HOME
    SET_GCODE_VARIABLE MACRO=CHECK_HOMED VARIABLE=force VALUE=0
  {% endif %}


[gcode_macro PARK]
description: z hop safe distance and park toolhead at rear
gcode:
  {% set x = params.X|default(printer.toolhead.axis_maximum.x)|float %}
  {% set y = params.Y|default(printer.toolhead.axis_maximum.y)|float %}
  {% set hop = params.HOP | default(10) | int %}

  {% set x_park = x/2 %}
  {% set y_park = (y - 5.0)|abs %}

  M118 { "parking to X:%0.1f Y:%0.1f" % (x_park, y_park) }

  SAFE_Z HOP={hop}

  G90

  G1 X{x_park} Y{y_park} F6000


[gcode_macro SAFE_Z]
description: z hop safe distance
gcode:
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}

  {% set HOP = params.HOP|default(2)|float %}

  {% set z_safe = HOP %}

  {% if act_z < (max_z - HOP ) %}
      #M118 { "safe z-hop +%0.1f" % (z_safe) }
  {% else %}
      {% set z_safe = max_z - act_z %}
      RESPOND MSG="{ "requested z-hop +%0.1f reduced to safe z-hop +%0.1f" % (HOP, z_safe) }" TYPE=error
  {% endif %}

  G91
  G1 Z{z_safe} F900
  G90


[gcode_macro PARK_FRONT]
description: z hop safe distance and park toolhead at front
gcode:
  PARK Y=20 HOP=20


[gcode_macro BRUSH]
description: brush nozzle
variable_purge: False
variable_skip: False
gcode:
  {% set times = params.TIMES | default(3, True) | int %}
  {% set retract = params.RETRACT | default(False,True) | int %}
  {% set return = params.RETURN | default(False,True) | int %}
  {% set purge = params.PURGE | default(printer['gcode_macro BRUSH']['purge'], True) | int %}

  {% set can_extrude = printer.extruder.can_extrude %}

  {% set sensor = printer['filament_switch_sensor toolhead_sensor'] %}
  {% if sensor and sensor.enabled %}
    {% if sensor.filament_detected %}
      {% set retract = 1 %}
    {% else %}
      {% set retract = 0 %}
      {% set can_extrude = 0 %}
    {% endif %}
  {% endif %}

  {% if not printer.quad_gantry_level.applied %}
    M118 skipping brush - gantry not level
  {% elif skip %}
    M118 skipping brush...
  {% else %}
    CHECK_HOMED

    DOCK_PROBE

    M118 brushing...

    G90

    SAVE_GCODE_STATE NAME=PRE_BRUSH

    SAFE_Z HOP=10
    SAVE_GCODE_STATE NAME=PRE_BRUSH_HOP

    G1 X82 Y350 F9000
    SAVE_GCODE_STATE NAME=BRUSH_HOVER

    G1 Z0.2 F3000

    {% if purge %}
      {% if can_extrude %}
        M118 purging filament before brush
        SAVE_GCODE_STATE NAME=PURGE
        SAFE_Z HOP=5
        SAVE_GCODE_STATE NAME=PURGE_HOVER
        G1 X30 Y350 F1500
        M400
        {% for i in range(purge) %}
          M118 purge pass {i+1} of {purge}
          FILAMENT_LOAD
        {% endfor %}
        RESTORE_GCODE_STATE NAME=PURGE_HOVER MOVE=1 MOVE_SPEED=450
        RESTORE_GCODE_STATE NAME=PURGE MOVE=1 MOVE_SPEED=450
      {% else %}
        M118 temperature too low - skipping purge
      {% endif %}
    {% endif %}
  
    M400

    {% if retract %}
      {% if can_extrude %}
        M118 retracting filament before brush
        M83
        G1 E-3 F2400
        M400
      {% else %}
        M118 temperature too low - skipping retract
        {% set retract = false %}
      {% endif %}
    {% endif %}

    {% for i in range(times) %}
      G1 X82 Y350 F1500
      G1 X45
      G1 X82
    {% endfor %}

    M400

    {% if retract %}
      G1 X45 Y350
      M83
      G1 E1 F300
      G4 P2000
      G1 X82 F1500
    {% endif %}

    SAFE_Z HOP=5
    G1 X175 Y350 F3000

    {% if return %}
      RESTORE_GCODE_STATE NAME=BRUSH_HOVER MOVE=1 MOVE_SPEED=450
      RESTORE_GCODE_STATE NAME=PRE_BRUSH_HOP MOVE=1 MOVE_SPEED=450
      RESTORE_GCODE_STATE NAME=PRE_BRUSH MOVE=1 MOVE_SPEED=450
    {% endif %}
  {% endif %}


[gcode_macro SKIP_BRUSH]
gcode:
  {% set skip = params.SKIP|default(True, True)|int %}

  SET_GCODE_VARIABLE MACRO=BRUSH VARIABLE=skip VALUE={skip}

  M118 { 'SKIP_BRUSH = %d' % (skip) }


[gcode_macro BRUSH_PURGE]
gcode:
  SET_GCODE_VARIABLE MACRO=BRUSH VARIABLE=purge VALUE=1

[gcode_macro BRUSH_PURGE_RESET]
gcode:
  SET_GCODE_VARIABLE MACRO=BRUSH VARIABLE=purge VALUE=0


[gcode_macro BRUSH_HOME]
description: brush nozzle before home
gcode:
  BRUSH
  HOME


[gcode_macro CENTER]
description: move toolhead to center of 7x7 mesh
gcode:
  CHECK_HOMED
  G90
  G0 X172.5 Y172.5 Z30 F20000


[gcode_macro RAISE]
description: raise toolhead high and front, for working on gantry
gcode:
  CHECK_HOMED
  G90
  G0 X175 Y25 Z225 F20000


[gcode_macro ZUP]
description: set z offset +0.01
gcode:
  {% set steps = params.STEPS | default(1) | int %}
  {% set distance = 0.01 * steps %}
  SET_GCODE_OFFSET Z_ADJUST={distance} MOVE=1
  M118 z offset {"+%0.2f" % (distance)}
  STORE_Z_OFFSET
  DISPLAY_Z


[gcode_macro ZDOWN]
description: set z offset -0.01
gcode:
  {% set steps = params.STEPS | default(1) | int %}
  {% set distance = 0.01 * steps %}
  SET_GCODE_OFFSET Z_ADJUST=-{distance} MOVE=1
  M118 z offset {"-%0.2f" % (distance)}
  STORE_Z_OFFSET
  DISPLAY_Z


[gcode_macro Z_OFFSET]
description: set z offset
gcode:
  {% set offset = params.OFFSET | float %}

  {% if offset %}
    SET_GCODE_OFFSET Z=0.0
    SET_GCODE_OFFSET Z_ADJUST={offset}
    DISPLAY_Z
  {% else %}
    RESPOND MSG="no offset provided?" TYPE=error
  {% endif %}


[gcode_macro STORE_Z_OFFSET]
description: store z offset in save variables for later
gcode:
  {% set key = 'artie_last_z_offset' %}

  SAVE_VARIABLE VARIABLE={key} VALUE={"%0.2f" % (printer.gcode_move.homing_origin.z) }

  DISPLAY_SAVE_VARIABLE KEY={key}


[gcode_macro COMPARE_STORED_Z_OFFSET]
description: store z offset in save variables for later
gcode:
  {% set notify = params.NOTIFY | default(False, True) %}

  {% set actual_offset = printer.gcode_move.homing_origin.z | float %}

  {% set key = 'artie_last_z_offset' %}
  {% set svv = printer.save_variables.variables %}
  {% set stored_offset = svv[key] | float %}

  {% set diff = (actual_offset - stored_offset) | abs %}

  {% if diff > 0 %}
    {% set msg = "actual offset %0.2f != stored offset %0.2f" % (actual_offset, stored_offset) %}
    RESPOND MSG="{msg}" TYPE=error
    {% if notify %}
      NOTIFY MSG="{msg}"
    {% endif %}
  {% else %}
    LOG_SUCCESS MSG='{ "actual offset %0.2f == stored offset %0.2f" % (actual_offset, stored_offset) }'
  {% endif %}


[gcode_macro DISPLAY_Z]
description: show z offset
gcode:
  {% set msg = "z offset: %0.2f" % (printer.gcode_move.homing_origin.z) %}
  LOG_DEBUG MSG='{msg}'
  M117 { msg }
