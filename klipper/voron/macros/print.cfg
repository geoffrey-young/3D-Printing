[gcode_macro PRINT_START]
description: custom start of print routine
gcode:
  {% set BED = params.BED | default(110) | int %}
  {% set HOTEND = params.HOTEND | default(245) | int %}
  {% set FILAMENT = params.FILAMENT | default("ABS") %}
  {% set MESH = params.MESH | default("FULL") %}
  {% set CHAMBER = params.CHAMBER | default(-1, True) | int %}
  {% set EXTRUDER = params.EXTRUDER | default(-1) | int %}

  M117 starting...

  M118 { "target bed temp:%d" % (BED) }
  M118 { "target hotend temp:%d" % (HOTEND) }
  M118 { "filament: %s" % (FILAMENT) }
  M118 { "mesh: %s" % (MESH) }
  M118 { "chamber: %s" % (CHAMBER) }
  M118 { "extruder: %s" % (EXTRUDER) }

  M107
  EXHAUST_FAN_OFF

  M140 S{BED}

  DOCK_PROBE

  QUICK_QGL

  CENTER

  M104 S{HOTEND}

  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer.extruder.target}

  EXTRUDER_INIT {rawparams}

  STATUS_PREHEAT

  CHAMBER_INIT {rawparams}

  M190 S{BED}
  M109 S150

  STATUS_OK

  SET_IDLE_TIMEOUT TIMEOUT=60     # protect the probe against errors that halt the print

  M107

  GENERATE_MESH MESH={MESH}

  AUTO_CALIBRATE_Z

  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}

  BRUSH
  G28 Z

  M109 S{HOTEND}

  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer.extruder.target}

  STATUS_PRINTING

  PURGE_LINE

  G21
  G90
  M83
  G92 E0

  ENABLE_FILAMENT_SENSOR

  M118 waiting for gcode buffer to catch up...
  M400
  M118 starting print


[gcode_macro CHAMBER_INIT]
description: chamber warmup
gcode:
  {% set filament = params.FILAMENT | default("ABS") %}
  {% set chamber = params.CHAMBER | default(-1, True) | int %}
  {% set bed = params.BED | default(110) | int %}

  {% if chamber < 0 %}
    {% if filament in ["ABS", "PC"] %}
      {% set chamber = 1 %}
    {% else %}
      {% set chamber = 0 %}
    {% endif %}
  {% endif %}

  {% if chamber %}
    CONVECTION_START

    {% set chamber_temp = printer["temperature_sensor chamber"].temperature %}

    CHAMBER_TEMPERATURE

    M118 waiting for bed to reach temp before starting soak timer...
    M190 S{bed}

    CHAMBER_WAIT START_TEMP={chamber_temp}

    EXHAUST_FAN_ON
  {% else %}
    EXHAUST_FAN_OFF
    SKIP_EXHAUST_FAN   # for resume
  {% endif %}


[gcode_macro EXTRUDER_INIT]
description: initialize extruder
gcode:
  M118 initializing extruder...
  NOTE_PRESSURE_ADVANCE


[gcode_macro SKIP_EXTRUDER_COOLDOWN_ON_PAUSE]
description: skip extruder cooldown on PAUSE
gcode:
  {% set skip = params.SKIP|default(True, True)|int %}

  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=skip_cooldown VALUE={skip}

  M118 { 'SKIP_EXTRUDER_COOLDOWN_ON_PAUSE = %d' % (skip) }


[gcode_macro SKIP_PREFLIGHT]
description: skip preflight qgl, mesh, auto z, and chamber
gcode:
  SKIP_MESH
  SKIP_CHAMBER_WAIT
  SKIP_AUTO_Z_SANITY_CHECK
  SKIP_AUTO_CALIBRATE_Z


[gcode_macro PRINT_END]
description: custom end of print routine
gcode:
  M400                           ; wait for buffer to clear
  G92 E0                         ; zero the extruder

  G1 E-0.5 F3600

  SAFE_Z HOP=50
  PARK

  EXTRUDER_CLEANUP

  COOLDOWN

  NOTIFY_PRINT_COMPLETE

  M117

  CLEANUP


[gcode_macro EXTRUDER_CLEANUP]
description: retract filament, etc
gcode:
  {% if printer.extruder.can_extrude %}
    FORM_TIP
  {% endif %}


[gcode_macro NOTIFY_PRINT_COMPLETE]
description: send print complete notification
gcode:
  {% set msg = "PRINT_END: %s complete" % (printer.print_stats.filename.split('/')[-1]) %}
  NOTIFY MSG="{msg}"


[gcode_macro PURGE_LINE]
description: draw purge line
variable_passes: 1
variable_skip: False
gcode:
  {% set start_x = 5 %}
  {% set y = 75 %}

  {% set passes = params.PASSES | default(printer['gcode_macro PURGE_LINE']['passes'], True) | int %}

  {% set z_high = 0.3 %}
  {% set z_low  = 0.2 %}
  {% set z_hop  = z_low + 0.4 %}

  {% set retract  = -0.5 %}
  {% set detract  = -retract %}

  {% set e_high   = 40 %}
  {% set e_mid    = 10 %}
  {% set e_low    = 3 %}

  {% set width    = 1.0 %}
  {% set margin   = 1.0 %}

  {% set x = start_x %}

  {% if skip %}
    M118 skipping PURGE_LINE
  {% else %}
    G90

    # standard ss start of gcode
    G92 E0
    G1 E{retract} F3600
    G1 Z10 F3000
    G1 X{start_x + width} Y{y} F5000
    G1 Z{z_hop} F3000

    {% for pass in range(passes) %}
      {% set x = start_x + (width * pass * 2) + (margin * pass) %}

      M118 { "starting pass %d of %d at X%0.2f" % ((pass+1), passes, x) }

      G1 Z{z_high} F3000
      G1 E{detract} F1800
      G1 X{x} Y{y} F1800

      # 200mm of heavy out
      G92 E0
      G1 X{x} Y{y+200} F1800 E{e_high}

      {% set x = x + width %}

      # 100mm of mid
      G92 E0
      G1 X{x} Y{y+200-100} F1800 E{e_mid}

      # equlize the extruder for the end
      G92 E0
      G1 Z{z_low} F3000
      G1 X{x} Y{y} F1800 E{e_low}

      M118 { "ended pass %d at X%0.2f" % ((pass+1), x) }
    {% endfor %}

    # wipe
    G92 E0
    G1 X{x - width} Y{y} F18000
    G1 E{retract} F3600
    G1 Z{z_hop} F3000
    G1 X{x + width} Y{y} F18000
    G1 E{detract} F1800
  {% endif %}


[gcode_macro SKIP_PURGE_LINE]
description: skip purge line
gcode:
  {% set skip = params.SKIP|default(True, True)|int %}

  SET_GCODE_VARIABLE MACRO=PURGE_LINE VARIABLE=skip VALUE={skip}

  M118 { 'SKIP_PURGE_LINE = %d' % (skip) }


[gcode_macro CANCEL_PRINT]
description: cancel print
rename_existing: CORE_CANCEL_PRINT
gcode:
  RESPOND MSG="canceling print" TYPE=error
  TURN_OFF_HEATERS
  M107
  SET_EXHAUST_FAN_TIMER
  SAFE_Z HOP=50
  PARK
  M117
  M400
  RESPOND MSG="print stopped" TYPE=error
  CLEAR_PAUSE
  EXTRUDER_CLEANUP
  SDCARD_RESET_FILE
  CORE_CANCEL_PRINT
  CLEANUP
  {% if default(printer['gcode_macro COOLDOWN']['skip']) | int %}
    RESPOND MSG="CANCEL_PRINT: skipping cooldown..." TYPE=error
  {% else %}
    TURN_OFF_HEATERS
  {% endif %}
  STATUS_OFF
  M400
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
  RESPOND MSG="printer reset" TYPE=error


[gcode_macro PAUSE]
description: pause print
rename_existing: CORE_PAUSE
variable_skip_cooldown: False
variable_lock: False
gcode:
  {% set z = params.Z|default(20)|int %}
  {% set hours = params.HOURS|default(12)|int %}

  M118 printer state: { printer.idle_timeout.state } 
  M118 printer paused: { printer['pause_resume'].is_paused }
  M118 pause lock: { lock }

  {% if 'Printing' in printer.idle_timeout.state or printer['pause_resume'].is_paused %}

    {% if lock %}
      M118 PAUSE: print already paused - preventing multiple gcode save states...
    {% else %}

      {% set msg = "pausing print at layer %d..." % (printer["gcode_macro SET_LAYER"].layer|int) %}
      NOTIFY MSG="{msg}"

      {% set pos = printer.toolhead.position %}
      {% set msg = "pausing print at X:%0.1f Y:%0.1f Z:%0.1f" % (pos.x, pos.y, pos.z) %}
      M118 { msg }

      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer.extruder.target}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=fan VALUE={printer.fan.speed}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=exhaust VALUE={printer['fan_generic exhaust_fan'].speed}

      G92 E0
      G90 # protect against bad actors, like ercf, who change the state of the printer before calling pause...

      SAVE_GCODE_STATE NAME=MYPAUSE

      M118 calling CORE_PAUSE...

      CORE_PAUSE

      M118 CORE_PAUSE complete

      SAFE_Z HOP={z}

      SAVE_GCODE_STATE NAME=MYPAUSEPARK

      PARK_FRONT

      {% if skip_cooldown %}
        M118 PAUSE: skipping cooldown...
      {% else %}
        M118 PAUSE: extruder cooling down...
        M104 S0
        M107
      {% endif %}

      DISABLE_FILAMENT_SENSOR

      SET_IDLE_TIMEOUT TIMEOUT={ 60 * 60 * hours }

      SET_EXHAUST_FAN_TIMER

      M118 PAUSE: pause routine complete

      STATUS_PAUSED

      SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=lock VALUE=True
    {% endif %}
  {% else %}
    M118 PAUSE: called pause outside an actual print? nothing to do...
  {% endif %}


[gcode_macro PAUSE_UNLOCK]
description: remove pause lock
gcode:
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=lock VALUE=False
  M118 pause unlocked


[gcode_macro RAISE_ERROR_IF_PAUSED]
description: abort if printer is currently paused
gcode:
  {% set add = params.MSG | default("",True) %}

  {% if printer['pause_resume'].is_paused %}
    CLEAR_PAUSE
    {% set msg = "printer paused - raising error %s" % (add) %}
    RAISE_ERROR MSG="{msg}"
  {% else %}
    M118 printer not paused
  {% endif %}


[gcode_macro RESUME]
description: resume print after pause
rename_existing: CORE_RESUME
variable_etemp: 245
variable_fan: 0
variable_exhaust: 0
gcode:

  M118 resuming print...

  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}

  {% if etemp > 0 %}
    M118 restoring extruder temperature to {etemp|int}
    M109 S{etemp|int}

    G92 E0
    G1 E-0.5 F3600
  {% endif %}

  {% if fan > 0 %}
    M118 restoring fan to {'%d' % (fan * 255)}
    M106 S{'%d' % (fan * 255)}
  {% endif %}

  {% if exhaust > 0 %}
    EXHAUST_FAN_ON
  {% endif %}

  RESTORE_GCODE_STATE NAME=MYPAUSEPARK MOVE=1 MOVE_SPEED=450

  RESTORE_GCODE_STATE NAME=MYPAUSE MOVE=1 MOVE_SPEED=450

  ENABLE_FILAMENT_SENSOR

  M118 custom resume complete, calling CORE_RESUME...

  CORE_RESUME

  PAUSE_UNLOCK

  {% if etemp > 0 %}
    G92 E0
    G1 E0.5 F3600
  {% endif %}

  M118 resume routine complete

  M117 

  STATUS_PRINTING


[gcode_macro SENSOR_DISABLED_RESUME]
description: resume print after pause with filament sensor disabled
gcode:
    RESUME
    DISABLE_FILAMENT_SENSOR


#[gcode_macro REPRINT_LAST]
#description: reprint last gcode file
#variable_file: ""
#gcode:
#    {% if file %}
#      M118 sending SDCARD_PRINT_FILE { file }...
#
#      SDCARD_PRINT_FILE { file }
#    {% else %}
#      M118 no last file to reprint...
#    {% endif %}
